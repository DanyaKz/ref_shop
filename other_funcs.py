from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
import sys
import logging
import json
import time
import random
from qiwi_init import Qiwi_init
from db import DataBase
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

class Other_Funcs(Qiwi_init):
    def __init__(self):
        super().__init__()
        # self.owner = 1299800437
        self.owner = 1032707306

    
    async def callback_speaker(self , **kwargs):
        if 'img' in kwargs:
            await self.bot.send_photo(kwargs['to'], 
                        open(f"photos/{kwargs['img']}" , 'rb'),
                        caption=kwargs['msg'],
                        reply_markup = kwargs['mark'],
                        parse_mode = 'HTML')
        else :
            await self.bot.send_message(kwargs['to'], 
                        text = kwargs['msg'] ,reply_markup = kwargs['mark'],parse_mode = 'HTML')
            # print('aa',msg)

    

    def format_info(self, message):
        to_add = {'first_name':'','username':''}

        for key in to_add:
            if key in message['from']:
                to_add[key] = message['from'][key]
            else:
                to_add[key] = 'null'
        to_add_1 = {
            'user_id':message['from']['id'],
            'parent':'null',
            'parent_for_tree':'null'
        }
        # –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è
        if len(message['text'].split()) > 1:
            parent = message['text'].split()[1]
            if self.is_user_exists(parent):
                to_add_1['parent'] = parent
                to_add_1['parent_for_tree'] = self.get_user_s_id(parent)['id']
        
        to_return = {**to_add, **to_add_1}
        return to_return
        
    async def payment_message(self,data):
        #–Ω–∞–ª–∏—á–∏–µ –∫—É—Ä—Å–∞
        print(data['user_id'] != data['owner'])
        if data['user_id'] != data['owner']:
            courses = self.select_from_courses(data['course_id'])
            if bool(courses):
                #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–æ–∏—á–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if bool(self.does_user_have_course(data)):
                    await self.bot.send_message(data['user_id'], 
                                    text = '–£ –≤–∞—Å —É–∂–µ –∏–º–µ–µ—Ç—Å—è –¥–∞–Ω–Ω—ã–π –∫—É—Ä—Å. –ï–≥–æ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ <b>¬´–ë–∏–∑–Ω–µ—Å-–∏–¥–µ–∏¬ª‚û°Ô∏è¬´–ú–æ–∏ –±–∏–∑–Ω–µ—Å-–∏–¥–µ–∏¬ª</b>' , 
                                        parse_mode = 'HTML')
                else:
                    #act = free
                    data['comment'] =f"{courses['course_id']}---{courses['title']}"
                    link = self.create_payment(data)
                    inline_kb = {
                        "inline_keyboard":[
                            [{
                                "text" : "–û–ø–ª–∞—Ç–∏—Ç—å",
                                "url":link
                            }],
                            [{
                                "text" : "–û–ø–ª–∞—Ç–∏–ª(–∞)",
                                "callback_data":"buy2"
                            }]]}
                    text = f"<b>–¢–æ–≤–∞—Ä:</b> {courses['title']} \n\n<b>–¶–µ–Ω–∞:</b> {data['amount']} —Ä—É–±–ª–µ–π"
                    await self.bot.send_message(data['user_id'], 
                                    text = text , reply_markup = inline_kb , parse_mode = 'HTML')
            else:
                await self.bot.send_message(data['user_id'], 
                                text = '–î–∞–Ω–Ω—ã–π –∫—É—Ä—Å –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –∫ –ø—Ä–æ–¥–∞–∂–µ' 
                                , parse_mode = 'HTML')
    
    async def before_check(self,user_id):
        check = self.check_payment(user_id)
        if isinstance(check,bool):
            if check:
                last_pay = self.get_last_payment(user_id)
                course = self.select_from_courses(int(last_pay['cooment'].split('---')[0]))
                self.add_to_cart({'user_id':user_id,'course_id':course['course_id']})
                await self.to_pay(user_id, last_pay['value_of_payment'])
                #send_course
                text = f"ü•≥ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ ü•≥\n<b>–¢–æ–≤–∞—Ä -</b>{course['title']}\n\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ–º üòâ\n{course['title']} {course['link']}"
                await self.bot.send_photo(user_id, 
                        open(f"photos/{course['image']}" , 'rb'),
                        caption=text,
                        parse_mode ='HTML')
                return True
            else:
                return False
        else:
            return check


    def menu(self):
        pass


    async def to_pay(self, user_id , amount):
        # print(self.get_parents(user_id))
        get_data = self.get_parents(user_id)
        if len(get_data['all_parents']) >= get_data['user_lvl'] and len(get_data['all_parents']) != 0:
            parent = get_data['all_parents'][-get_data['user_lvl']]
            parent_coin_lvl = self.get_coin_lvl(parent['user_id'])['lvl']
            print(parent,parent_coin_lvl,get_data['user_lvl'])
            if parent['user_id'] == self.owner:
                return 0
            if parent_coin_lvl >= get_data['user_lvl'] :
                print(parent_coin_lvl >= get_data['user_lvl'] )
                if get_data['user_lvl'] == 0:
                    print('chmo')
                else:
                    msg = f"–í–∞—à —Ä–µ—Ñ–µ—Ä –ø–æ–ª—É—á–∏–ª –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∞—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ {amount/2} —Ä—É–±. \n–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä—ã:"
                    msg += self.combine_clidren_1_lvl(parent['user_id'])
                    print(msg)
                    print(parent['user_id'])
                    await self.bot.send_message(parent['user_id'],
                        msg, parse_mode = 'HTML')
                    if not self.pay_parent(parent['user_id'],amount/2):
                        await self.bot.send_message(parent['user_id'],
                        '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–µ–Ω—å–≥–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –Ω–æ –æ–Ω–∏ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ —É—Ç—Ä–æ–º –±–æ—Ç –ø–æ–ø—Ä–æ–±—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö —Å–Ω–æ–≤–∞, –∞ –ø–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å–≤–æ–µ–≥–æ –Ω–æ–º–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ ¬´–º–µ–Ω—é¬ª - ¬´–º–æ–∏ –¥–∞–Ω–Ω—ã–µ¬ª, –ª–∏–±–æ –∂–µ –ø—Ä–æ–≤–µ—Ä—å –ª–∏–º–∏—Ç—ã —Å–≤–æ–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞')
            else:
                await self.bot.send_message(parent['user_id'],
                    '–í–∞—à —Ä–µ—Ñ–µ—Ä –ø—Ä–µ–≤–∑–æ—à–µ–ª –≤–∞—Å –∏ –≤—ã —É–ø—É—Å—Ç–∏–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å. –°–æ–≤–µ—Ç—É—é –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å!')
        else : 
            print('–í–µ—Å—å –∫—ç—à –∞–¥–º–∏–Ω—É')
    
    def try_parse_number(self,digit):
        try:
            int(digit)
            if digit[0] in ['+','-']:
                digit = digit[1:]
            return digit, True
        except ValueError:
            return digit, False

    def combine_clidren_1_lvl(self, user_id):
        children = self.get_data_children_1_lvl(user_id)
        to_return = '\n'
        if len(children) > 0:
            for i in range(len(children)):
                to_return += f"""    <i><a href = "https://web.telegram.org/z/#{children[i]['user_id']}">¬´{children[i]['first_name']}¬ª</a></i>,"""
        return to_return[:-1]
    
    async def courses_list(self, message, page , isFirst = False):
            user_id = message['from']['id']
            users_courses = self.get_users_courses(page,user_id)
            last_page = self.get_len(user_id)['count(1)']
            msg = f'–í–∞—à–∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - {last_page}):'
            mark_up = {"inline_keyboard":[]}
            for i in range(len(users_courses)):
                a_course = self.get_course(users_courses[i]['course_id'])
                to_append = [{"text":f"{a_course['title']}","callback_data":f"view{a_course['course_id']}"}]
                mark_up["inline_keyboard"].append(to_append)
            print(last_page)
            next_p = [{"text":f"–°–ª–µ–¥. —Å—Ç—Ä. #Ô∏è‚É£ {page+1}","callback_data":"get_more"}]
            prev_p = [{"text":f"–ü—Ä–µ–¥. —Å—Ç—Ä. #Ô∏è‚É£ {page-1}","callback_data":"get_prev"}]
            both_p = [prev_p[0],next_p[0]]
            if last_page > 5:
                if isFirst or page == 1:
                    mark_up["inline_keyboard"].append(list(next_p))
                elif ((page == (last_page//5) + 1) and last_page % 5 != 0) or ((page == last_page//5) and last_page % 5 == 0):
                    mark_up["inline_keyboard"].append(list(prev_p))
                else:
                    mark_up["inline_keyboard"].append(both_p)
            mark_up["inline_keyboard"].append([{"text":f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é","callback_data":"menu0"}])

            await self.bot.send_message(text = msg , chat_id = user_id,
                                        reply_markup = mark_up, parse_mode = "HTML")
    
    async def my_children(self, user_id):
        get_user = self.is_user_exists(user_id)
        children = self.children_lvl_count(user_id)
        children_plus_lvl = self.children_plus_lvl_count(user_id)
        msg = '<i>'
        if bool(len(children)):
            msg += '–¢–≤–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:\n'
            for i in children:
                msg += f"{i['floor']}—É—Ä. - {i['c']} —á–µ–ª.\n"
        else:
            msg += f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ , —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–≤–æ–µ–º—É —É—Ä–æ–≤–Ω—é, –Ω–µ—Ç."
        msg += f"\n–°–æ–≤–µ—Çüí°\n–¢—ã –ø–æ–ª—É—á–∞–µ—à—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å —É—Ä–æ–≤–Ω–µ–π, —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ–º—É —Ç–≤–æ–µ–º—É.\n–£ —Ç–µ–±—è ¬´{get_user['lvl']}¬ª —É—Ä–æ–≤–µ–Ω—å.\n"
        if bool(children_plus_lvl['floor']):
            msg += f"–ù–∞ ¬´{children_plus_lvl['floor']}¬ª —É—Ä–æ–≤–Ω–µ ‚Äì {children_plus_lvl['c']} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.\n–°–æ–≤–µ—Ç—É—é –ø–æ–¥–Ω—è—Ç—å —É—Ä–æ–≤–µ–Ω—å.\n–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å —Å ¬´{children_plus_lvl['floor']}¬ª —É—Ä–æ–≤–Ω—è ‚Äì ¬´{children_plus_lvl['c'] * 50}¬ª —Ä—É–±.\n"
        
        msg += '</i>'
        print(msg)
        mark_up = {"inline_keyboard":[[{"text":f"–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ë–∏–∑–Ω–µ—Å-–∏–¥–µ—é ","url":"https://t.me/SIYP_ideas"}],
        [{"text":f"–ú–µ–Ω—é","callback_data":"menu0"}]]}
        await self.bot.send_message(user_id, 
                            text = msg ,
                                reply_markup = mark_up , parse_mode = 'HTML')
    
    async def my_salary(self, user_id):
        salary = self.my_salary_db(user_id)['value']
        children = self.children_1_lvl(user_id)['c']
        msg = f"–í—Å–µ–≥–æ - {salary} —Ä—É–±.\n–¢—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª –≤—Å–µ–≥–æ - {children} —Ä–µ—Ñ."
        mark_up = {"inline_keyboard":[[{"text":f"–ú–µ–Ω—é","callback_data":"menu0"}]]}
        await self.bot.send_message(user_id, 
                            text = msg , 
                                reply_markup = mark_up , parse_mode = 'HTML')
    
    async def daily_users_response(self):
        users = self.users_over_lower_1_lvl('>')
        lvl_up = InlineKeyboardButton('–ü–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å', url='https://t.me/SIYP_ideas')
        earn_up = InlineKeyboardButton('–ü–æ–≤—ã—Å–∏—Ç—å –∑–∞—Ä–∞–±–æ—Ç–æ–∫', url='https://t.me/+q6shxvXPtZZiNjli')
        mark = InlineKeyboardMarkup().add(lvl_up).add(earn_up)
        try:
            for u in users:
                if u['user_id'] != self.owner:
                    i = self.users_response_db(u['user_id'])
                    msg = f"–£—Ç—Ä–æ –¥–æ–±—Ä–æ–µ üòâ\n–ü–æ–¥–≥–æ—Ç–æ–≤–∏–ª —Ç—É—Ç –¥–ª—è —Ç–µ–±—è –æ—Ç—á–µ—Ç ü§ó\n\n–†–µ—Ñ–µ—Ä–∞–ª—ã:\n–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å ‚Äì ¬´{i['user_lvl']}¬ª.\n–¢–≤–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã 1–≥–æ —É—Ä–æ–≤–Ω—è ‚Äì ¬´{i['children_first_lvl']}¬ª.\n–†–µ—Ñ–µ—Ä–∞–ª—ã –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π ‚Äì {i['all_children']}.\n–ù–æ–≤—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ ¬´–≤—á–µ—Ä–∞—à–Ω—è—è –¥–∞—Ç–∞¬ª - {i['new_first_lvl']}.\n\n–¢–≤–æ–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫:\n–ó–∞ ¬´{i['daily_date']}¬ª - {i['earned_yesterday']} —Ä—É–±.\n–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è ‚Äì {i['erned_all']} —Ä—É–±.\n\n–¢–≤–æ–π –±–∞–ª–∞–Ω—Å ‚Äì ¬´{i['balance']}¬ª —Ä—É–±.\n{'<b>–ü—Ä–æ–≤–µ—Ä—å –ª–∏–º–∏—Ç—ã –∫–æ—à–µ–ª—å–∫–∞</b>' if i['balance'] != 0 else ''} \nüí° –°–æ–≤–µ—Ç:\n–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å ‚Äì ¬´{i['user_lvl']}¬ª.\n–¢—ã –ø–æ–ª—É—á–∞–µ—à—å 50% - —Å 1 –ø–æ ¬´{i['user_lvl']}¬ª —É—Ä.\n–ù–∞ ¬´{i['user_lvl']+1}¬ª —É—Ä–æ–≤–Ω–µ —É —Ç–µ–±—è ‚Äì ¬´{i['children_nex_lvl']}¬ª —Ä–µ—Ñ.\n–í–æ–∑–º–æ–∂–Ω—ã–π –¥–æ—Ö–æ–¥ –æ—Ç —É—Ä–æ–≤–Ω—è ‚Äì ¬´{i['children_nex_lvl']*50}¬ª —Ä—É–±.\n–°–æ–≤–µ—Ç—É—é –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å.\n\nüí° –°–æ–≤–µ—Ç:\n–¢–≤–æ–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –±—ã—Å—Ç—Ä–µ–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–π, –∫–æ–≥–¥–∞ —Ç—ã –ø—Ä–∏–≥–ª–∞—à–∞–µ—à—å –±–æ–ª—å—à–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.\n–°–æ–≤–µ—Ç—É—é –ø–æ—Å–µ—Ç–∏—Ç—å –∫–∞–Ω–∞–ª –∏ –º–∞–∫—Å–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –¥–æ—Ö–æ–¥ üòâ"
                    await self.bot.send_message(u['user_id'], 
                                text = msg , 
                                    reply_markup = mark , parse_mode = 'HTML')
        except Exception as e:
            print(e)
    
    async def daily_zero_users_response(self):
        users = self.users_over_lower_1_lvl('<')
        lvl_up = InlineKeyboardButton('–ë–∏–∑–Ω–µ—Å-–∏–¥–µ–∏', url='https://t.me/SIYP_ideas')
        mark = InlineKeyboardMarkup().add(lvl_up)
        try:
            for i in users:
                msg = "–ü—Ä–∏–≤–µ—Ç! üòâ\n–¢—ã –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è —Å –ë–∏–∑–Ω–µ—Å-–∏–¥–µ–µ–π?\n\n–°–æ–≤–µ—Ç—É—é —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –±—ã—Å—Ç—Ä–µ–π!\n–ü–æ–∫–∞ —Ç—ã –¥—É–º–∞–µ—à—å ‚Äì –¥—Ä—É–≥–∏–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç ü§ë"
                await self.bot.send_message(i['user_id'], 
                            text = msg , 
                                reply_markup = mark , parse_mode = 'HTML')
        except Exception as e:
            pass
